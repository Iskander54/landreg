atl1@PN104254:~/NIST/Yann/landreg-tooling$ docker run --rm -it -v $PWD/slither-landreg-end:/tmp/landreg -w /tmp/landreg --entrypoint bash mcdostone/slither -c "slither --json tmp.json ."
Unable to find image 'mcdostone/slither:latest' locally
latest: Pulling from mcdostone/slither
Digest: sha256:082fb879cc4e419bfc5bdd968af7e23f9a533321f0b850bce6a3779b93712603
Status: Downloaded newer image for mcdostone/slither:latest
'npx truffle compile --all' running (use --truffle-version truffle@x.x.x to use specific version)

Compiling your contracts...
===========================
> Compiling ./contracts/Migrations.sol
> Compiling ./contracts/Mortgage.sol
> Compiling ./contracts/MultiOwnership.sol
> Compiling ./contracts/Registry.sol
> Compiling ./contracts/Repayment.sol
> Compiling ./contracts/RoleManagement.sol
> Compiling @openzeppelin/contracts/GSN/Context.sol
> Compiling @openzeppelin/contracts/access/Roles.sol
> Compiling @openzeppelin/contracts/math/SafeMath.sol
> Compiling @openzeppelin/contracts/ownership/Ownable.sol
> Artifacts written to /tmp/landreg/build/contracts
> Compiled successfully using:
   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang


- Fetching solc version list from solc-bin. Attempt #1
âœ” Downloading compiler. Attempt #1.

> Duplicate contract names found for Registry.
> This can cause errors and unknown behavior. Please rename one of your contracts.

> Duplicate contract names found for Registry.
> This can cause errors and unknown behavior. Please rename one of your contracts.

====== red
MultiOwnership.buyProperty() (MultiOwnership.sol#145-152) sends eth to arbitrary user
        Dangerous calls:
        - reg.getPropertyOwner(pin).transfer(address(this).balance) (MultiOwnership.sol#149)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Registry is re-used:
        - Repayment.sol#4-8
        - MultiOwnership.sol#7-11
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#name-reused

Reentrancy in Repayment.makePayment() (Repayment.sol#88-106):
        External calls:
        - penalty = MissedPayment() (Repayment.sol#90)
                - r.updateProperty(creditor,pin) (Repayment.sol#143)
        External calls sending eth:
        - msg.sender.transfer(change) (Repayment.sol#94)
        State variables written after the call(s):
        - processPeriod(0) (Repayment.sol#97)
                - balance -= principal (Repayment.sol#77)
        - processPeriod(0) (Repayment.sol#97)
                - dueDate += paymentPeriod (Repayment.sol#78)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
=========== yellow
MultiOwnership.addMoney() (MultiOwnership.sol#182-195) performs a multiplication on the result of a division:
        -ownersPct[msg.sender] = SafeMath.add(SafeMath.mul(SafeMath.div(msg.value,amountToReach),100),tmp) (MultiOwnership.sol#191)
Repayment.processMissedPayment() (Repayment.sol#109-124) performs a multiplication on the result of a division:
        -interest = SafeMath.div(tmp,100) (Repayment.sol#114)
        -fees = SafeMath.mul(missedPayment,interest) (Repayment.sol#115)
Repayment.MissedPayment() (Repayment.sol#126-139) performs a multiplication on the result of a division:
        -interest = SafeMath.div(tmp,100) (Repayment.sol#131)
        -fees = SafeMath.mul(missedPayment,interest) (Repayment.sol#132)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

MultiOwnership.joinSharedProperty() (MultiOwnership.sol#159-177) uses a dangerous strict equality:
        - pendingBuying == amountToReach (MultiOwnership.sol#173)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Repayment.makePayment() (Repayment.sol#88-106) contains a tautology or contradiction:
        - change >= 0 (Repayment.sol#93)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#tautology-or-contradiction

Mortgage.executeTransaction(uint256,address) (Mortgage.sol#172-185) ignores return value by r.updateProperty(mortgages[transactionId].beneficiary,mortgages[transactionId].pin) (Mortgage.sol#179)
MultiOwnership.buyProperty() (MultiOwnership.sol#145-152) ignores return value by reg.updateProperty(address(this),pin) (MultiOwnership.sol#150)
Repayment.cancelLoan() (Repayment.sol#141-145) ignores return value by r.updateProperty(creditor,pin) (Repayment.sol#143)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

====== green
Reentrancy in Mortgage.executeTransaction(uint256,address) (Mortgage.sol#172-185):
        External calls:
        - r.updateProperty(mortgages[transactionId].beneficiary,mortgages[transactionId].pin) (Mortgage.sol#179)
        External calls sending eth:
        - withdraw(transactionId) (Mortgage.sol#177)
                - mortgages[transactionId].pin_owner.transfer(address(this).balance) (Mortgage.sol#89)
        State variables written after the call(s):
        - repay = createRepayment(transactionId,addr) (Mortgage.sol#180)
                - repayments.push(address(repay)) (Mortgage.sol#163)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in MultiOwnership.buyProperty() (MultiOwnership.sol#145-152):
        External calls:
        - reg.getPropertyOwner(pin).transfer(address(this).balance) (MultiOwnership.sol#149)
        - reg.updateProperty(address(this),pin) (MultiOwnership.sol#150)
        External calls sending eth:
        - reg.getPropertyOwner(pin).transfer(address(this).balance) (MultiOwnership.sol#149)
        Event emitted after the call(s):
        - SharedPropertyBought(pin,address(this),owners.length) (MultiOwnership.sol#151)
Reentrancy in Repayment.cancelLoan() (Repayment.sol#141-145):
        External calls:
        - r.updateProperty(creditor,pin) (Repayment.sol#143)
        Event emitted after the call(s):
        - LoanCancelled(pin) (Repayment.sol#144)
Reentrancy in Mortgage.executeTransaction(uint256,address) (Mortgage.sol#172-185):
        External calls:
        - r.updateProperty(mortgages[transactionId].beneficiary,mortgages[transactionId].pin) (Mortgage.sol#179)
        External calls sending eth:
        - withdraw(transactionId) (Mortgage.sol#177)
                - mortgages[transactionId].pin_owner.transfer(address(this).balance) (Mortgage.sol#89)
        Event emitted after the call(s):
        - CreateRepaymentContract(address(repay)) (Mortgage.sol#164)
                - repay = createRepayment(transactionId,addr) (Mortgage.sol#180)
Reentrancy in Repayment.makePayment() (Repayment.sol#88-106):
        External calls:
        - penalty = MissedPayment() (Repayment.sol#90)
                - r.updateProperty(creditor,pin) (Repayment.sol#143)
        External calls sending eth:
        - msg.sender.transfer(change) (Repayment.sol#94)
        Event emitted after the call(s):
        - ChangeFromPenalty(change) (Repayment.sol#95)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Repayment.makePayment() (Repayment.sol#88-106) uses timestamp for comparisons
        Dangerous comparisons:
        - now > dueDate (Repayment.sol#89)
Repayment.processMissedPayment() (Repayment.sol#109-124) uses timestamp for comparisons
        Dangerous comparisons:
        - require(bool)(now > dueDate) (Repayment.sol#110)
Repayment.MissedPayment() (Repayment.sol#126-139) uses timestamp for comparisons
        Dangerous comparisons:
        - require(bool)(now > dueDate) (Repayment.sol#127)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Mortgage.circuitBreaker() (Mortgage.sol#71-74) compares to a boolean constant:
        -contractPaused == false (Mortgage.sol#72)
Mortgage.confirmTransaction(uint256,address) (Mortgage.sol#141-147) compares to a boolean constant:
        -require(bool)(confirmations[transactionId][msg.sender] == false) (Mortgage.sol#142)
Mortgage.confirmTransaction(uint256,address) (Mortgage.sol#141-147) compares to a boolean constant:
        -require(bool)(isParty[transactionId][msg.sender] == true) (Mortgage.sol#143)
Mortgage.revokeConfirmation(uint256) (Mortgage.sol#151-156) compares to a boolean constant:
        -require(bool)(isParty[transactionId][msg.sender] == true) (Mortgage.sol#153)
Mortgage.revokeConfirmation(uint256) (Mortgage.sol#151-156) compares to a boolean constant:
        -require(bool)(confirmations[transactionId][msg.sender] == true) (Mortgage.sol#152)
Mortgage.checkIfPaused() (Mortgage.sol#48-51) compares to a boolean constant:
        -require(bool)(contractPaused == false) (Mortgage.sol#49)
MultiOwnership.upVote() (MultiOwnership.sol#264-274) compares to a boolean constant:
        -require(bool,string)(voters[operation][msg.sender] == false,Sender already voted.) (MultiOwnership.sol#267)
MultiOwnership.downVote() (MultiOwnership.sol#280-289) compares to a boolean constant:
        -require(bool,string)(voters[operation][msg.sender] == false,Sender already voted.) (MultiOwnership.sol#283)
MultiOwnership.onlyOwner() (MultiOwnership.sol#83-86) compares to a boolean constant:
        -require(bool,string)(isOwner(msg.sender) == true,You are not part of the owners.) (MultiOwnership.sol#84)
RoleManagement.addRolesList(string) (RoleManagement.sol#84-88) compares to a boolean constant:
        -checkExistingRole(_role) == false (RoleManagement.sol#85)
RoleManagement.onlyExistingRole(string) (RoleManagement.sol#42-45) compares to a boolean constant:
        -require(bool,string)(checkExistingRole(_role) == true,The role you want to assign doesn't exist.) (RoleManagement.sol#43)
RoleManagement.onlyAdmin() (RoleManagement.sol#66-70) compares to a boolean constant:
        -require(bool,string)(checkAdmin(msg.sender,Admin) == true,You need to be an admin or an owner to proceed this action.) (RoleManagement.sol#68)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

Different versions of Solidity is used in :
        - Version used: ['>=0.4.21<0.6.0', '^0.5.0']
        - ^0.5.0 (Mortgage.sol#4)
        - ^0.5.0 (MultiOwnership.sol#5)
        - ^0.5.0 (@openzeppelin/contracts/access/Roles.sol#1)
        - ^0.5.0 (Repayment.sol#2)
        - ^0.5.0 (@openzeppelin/contracts/math/SafeMath.sol#1)
        - ^0.5.0 (RoleManagement.sol#1)
        - ^0.5.0 (@openzeppelin/contracts/GSN/Context.sol#1)
        - >=0.4.21<0.6.0 (Migrations.sol#1)
        - ^0.5.0 (@openzeppelin/contracts/ownership/Ownable.sol#1)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Pragma version^0.5.0 (Mortgage.sol#4) allows old versions
Pragma version^0.5.0 (MultiOwnership.sol#5) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts/access/Roles.sol#1) allows old versions
Pragma version^0.5.0 (Repayment.sol#2) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts/math/SafeMath.sol#1) allows old versions
Pragma version^0.5.0 (RoleManagement.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts/GSN/Context.sol#1) allows old versions
Pragma version>=0.4.21<0.6.0 (Migrations.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts/ownership/Ownable.sol#1) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Mortgage.submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address)._bank (Mortgage.sol#103) is not in mixedCase
Parameter Mortgage.submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address)._beneficiary (Mortgage.sol#103) is not in mixedCase
Parameter Mortgage.submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address)._pin_owner (Mortgage.sol#103) is not in mixedCase
Parameter Mortgage.submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address)._pin (Mortgage.sol#103) is not in mixedCase
Parameter Mortgage.submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address)._amount (Mortgage.sol#103) is not in mixedCase
Parameter Mortgage.submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address)._rates (Mortgage.sol#103) is not in mixedCase
Parameter Mortgage.submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address)._length (Mortgage.sol#103) is not in mixedCase
Variable Mortgage.ETHER (Mortgage.sol#11) is not in mixedCase
Variable Mortgage.MortgageCount (Mortgage.sol#12) is not in mixedCase
Struct MultiOwnership.onSale (MultiOwnership.sol#16-20) is not in CapWords
Parameter MultiOwnership.isOwner(address)._owners (MultiOwnership.sol#59) is not in mixedCase
Parameter MultiOwnership.sellShare(uint256,uint256)._pct (MultiOwnership.sol#202) is not in mixedCase
Parameter MultiOwnership.sellShare(uint256,uint256)._amount (MultiOwnership.sol#202) is not in mixedCase
Parameter MultiOwnership.transferOwnership(address,address,uint256)._newOwner (MultiOwnership.sol#228) is not in mixedCase
Parameter MultiOwnership.transferOwnership(address,address,uint256)._oldOwner (MultiOwnership.sol#228) is not in mixedCase
Parameter MultiOwnership.transferOwnership(address,address,uint256)._pct (MultiOwnership.sol#228) is not in mixedCase
Variable MultiOwnership.FINNEY (MultiOwnership.sol#31) is not in mixedCase
Function Repayment.MissedPayment() (Repayment.sol#126-139) is not in mixedCase
Variable Repayment.ETHER (Repayment.sol#12) is not in mixedCase
Variable Repayment.Reg (Repayment.sol#26) is not in mixedCase
Parameter RoleManagement.checkExistingRole(string)._role (RoleManagement.sol#27) is not in mixedCase
Parameter RoleManagement.checkAdmin(address,string)._operator (RoleManagement.sol#52) is not in mixedCase
Parameter RoleManagement.checkAdmin(address,string)._role (RoleManagement.sol#52) is not in mixedCase
Parameter RoleManagement.addRolesList(string)._role (RoleManagement.sol#84) is not in mixedCase
Parameter RoleManagement.hasRole(address,string)._operator (RoleManagement.sol#97) is not in mixedCase
Parameter RoleManagement.hasRole(address,string)._role (RoleManagement.sol#97) is not in mixedCase
Parameter RoleManagement.addRole(address,string)._operator (RoleManagement.sol#110) is not in mixedCase
Parameter RoleManagement.addRole(address,string)._role (RoleManagement.sol#110) is not in mixedCase
Parameter RoleManagement.removeRole(address,string)._operator (RoleManagement.sol#122) is not in mixedCase
Parameter RoleManagement.removeRole(address,string)._role (RoleManagement.sol#122) is not in mixedCase
Parameter RoleManagement.grantPermission(address,string)._operator (RoleManagement.sol#130) is not in mixedCase
Parameter RoleManagement.grantPermission(address,string)._permission (RoleManagement.sol#130) is not in mixedCase
Parameter RoleManagement.revokePermission(address,string)._operator (RoleManagement.sol#134) is not in mixedCase
Parameter RoleManagement.revokePermission(address,string)._permission (RoleManagement.sol#134) is not in mixedCase
Variable RoleManagement.UserRoles (RoleManagement.sol#10) is not in mixedCase
Parameter Migrations.upgrade(address).new_address (Migrations.sol#19) is not in mixedCase
Variable Migrations.last_completed_migration (Migrations.sol#5) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in MultiOwnership.addMoney() (MultiOwnership.sol#182-195):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#186)
        State variables written after the call(s):
        - ownersPct[msg.sender] = SafeMath.add(SafeMath.mul(SafeMath.div(msg.value,amountToReach),100),tmp) (MultiOwnership.sol#191)
        - pendingBuying = address(this).balance (MultiOwnership.sol#192)
        Event emitted after the call(s):
        - OwnerSharedIncreased(msg.sender,ownersPct[msg.sender]) (MultiOwnership.sol#193)
        - SendingBackMoney(msg.value,SafeMath.sub(amountToReach,pendingBuying),SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#188)
Reentrancy in MultiOwnership.addMoney() (MultiOwnership.sol#182-195):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#186)
        - buyProperty() (MultiOwnership.sol#194)
                - reg.getPropertyOwner(pin).transfer(address(this).balance) (MultiOwnership.sol#149)
        State variables written after the call(s):
        - buyProperty() (MultiOwnership.sol#194)
                - pendingBuying = 0 (MultiOwnership.sol#147)
        Event emitted after the call(s):
        - SharedPropertyBought(pin,address(this),owners.length) (MultiOwnership.sol#151)
                - buyProperty() (MultiOwnership.sol#194)
Reentrancy in MultiOwnership.buyProperty() (MultiOwnership.sol#145-152):
        External calls:
        - reg.getPropertyOwner(pin).transfer(address(this).balance) (MultiOwnership.sol#149)
        Event emitted after the call(s):
        - SharedPropertyBought(pin,address(this),owners.length) (MultiOwnership.sol#151)
Reentrancy in Mortgage.executeTransaction(uint256,address) (Mortgage.sol#172-185):
        External calls:
        - withdraw(transactionId) (Mortgage.sol#177)
                - mortgages[transactionId].pin_owner.transfer(address(this).balance) (Mortgage.sol#89)
        State variables written after the call(s):
        - repay = createRepayment(transactionId,addr) (Mortgage.sol#180)
                - repayments.push(address(repay)) (Mortgage.sol#163)
        Event emitted after the call(s):
        - CreateRepaymentContract(address(repay)) (Mortgage.sol#164)
                - repay = createRepayment(transactionId,addr) (Mortgage.sol#180)
Reentrancy in MultiOwnership.joinSharedProperty() (MultiOwnership.sol#159-177):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#164)
        State variables written after the call(s):
        - owners.push(msg.sender) (MultiOwnership.sol#168)
        - ownersIndices[msg.sender] = owners.length (MultiOwnership.sol#169)
        - ownersPct[msg.sender] = SafeMath.div(SafeMath.mul(amount,100),amountToReach) (MultiOwnership.sol#170)
        - pendingBuying = address(this).balance (MultiOwnership.sol#171)
        Event emitted after the call(s):
        - SendingBackMoney(msg.value,SafeMath.sub(amountToReach,pendingBuying),SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#166)
        - SharedPropertyJoined(msg.sender,ownersPct[msg.sender],SafeMath.sub(amountToReach,pendingBuying)) (MultiOwnership.sol#172)
Reentrancy in MultiOwnership.joinSharedProperty() (MultiOwnership.sol#159-177):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#164)
        - buyProperty() (MultiOwnership.sol#174)
                - reg.getPropertyOwner(pin).transfer(address(this).balance) (MultiOwnership.sol#149)
        State variables written after the call(s):
        - buyProperty() (MultiOwnership.sol#174)
                - pendingBuying = 0 (MultiOwnership.sol#147)
        Event emitted after the call(s):
        - SharedPropertyBought(pin,address(this),owners.length) (MultiOwnership.sol#151)
                - buyProperty() (MultiOwnership.sol#174)
Reentrancy in Repayment.makePayment() (Repayment.sol#88-106):
        External calls:
        - msg.sender.transfer(change) (Repayment.sol#94)
        State variables written after the call(s):
        - processPeriod(0) (Repayment.sol#97)
                - balance -= principal (Repayment.sol#77)
        - processPeriod(0) (Repayment.sol#97)
                - dueDate += paymentPeriod (Repayment.sol#78)
        Event emitted after the call(s):
        - ChangeFromPenalty(change) (Repayment.sol#95)
Reentrancy in Mortgage.submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address) (Mortgage.sol#103-120):
        External calls:
        - address(this).transfer(_amount * ETHER) (Mortgage.sol#117)
        - confirmTransaction(transactionId,addr) (Mortgage.sol#118)
                - mortgages[transactionId].pin_owner.transfer(address(this).balance) (Mortgage.sol#89)
        State variables written after the call(s):
        - confirmTransaction(transactionId,addr) (Mortgage.sol#118)
                - confirmations[transactionId][msg.sender] = true (Mortgage.sol#144)
        - confirmTransaction(transactionId,addr) (Mortgage.sol#118)
                - mortgages[transactionId].executed = true (Mortgage.sol#175)
        - confirmTransaction(transactionId,addr) (Mortgage.sol#118)
                - pendingWithdrawals[mortgages[transactionId].pin_owner] = 0 (Mortgage.sol#88)
        - confirmTransaction(transactionId,addr) (Mortgage.sol#118)
                - repayments.push(address(repay)) (Mortgage.sol#163)
        Event emitted after the call(s):
        - Confirmation(msg.sender,transactionId) (Mortgage.sol#145)
                - confirmTransaction(transactionId,addr) (Mortgage.sol#118)
        - CreateRepaymentContract(address(repay)) (Mortgage.sol#164)
                - confirmTransaction(transactionId,addr) (Mortgage.sol#118)
        - Execution(transactionId) (Mortgage.sol#176)
                - confirmTransaction(transactionId,addr) (Mortgage.sol#118)
        - ExecutionFailure(transactionId) (Mortgage.sol#183)
                - confirmTransaction(transactionId,addr) (Mortgage.sol#118)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Mortgage.ETHER (Mortgage.sol#11) should be constant
MultiOwnership.FINNEY (MultiOwnership.sol#31) should be constant
Repayment.ETHER (Repayment.sol#12) should be constant
Repayment.paymentPeriod (Repayment.sol#23) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

circuitBreaker() should be declared external:
        - Mortgage.circuitBreaker() (Mortgage.sol#71-74)
getDeposit() should be declared external:
        - Mortgage.getDeposit() (Mortgage.sol#78-80)
submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address) should be declared external:
        - Mortgage.submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address) (Mortgage.sol#103-120)
isExecuted(uint256) should be declared external:
        - Mortgage.isExecuted(uint256) (Mortgage.sol#134-136)
revokeConfirmation(uint256) should be declared external:
        - Mortgage.revokeConfirmation(uint256) (Mortgage.sol#151-156)
updateProperty(address,uint256) should be declared external:
        - Registry.updateProperty(address,uint256) (MultiOwnership.sol#8)
grantPermission(address,string) should be declared external:
        - Registry.grantPermission(address,string) (MultiOwnership.sol#9)
getPropertyOwner(uint256) should be declared external:
        - Registry.getPropertyOwner(uint256) (MultiOwnership.sol#10)
ownersCount() should be declared external:
        - MultiOwnership.ownersCount() (MultiOwnership.sol#63-65)
allOperationsCount() should be declared external:
        - MultiOwnership.allOperationsCount() (MultiOwnership.sol#67-69)
getBalance() should be declared external:
        - MultiOwnership.getBalance() (MultiOwnership.sol#71-74)
getPendingbuying() should be declared external:
        - MultiOwnership.getPendingbuying() (MultiOwnership.sol#77-79)
joinSharedProperty() should be declared external:
        - MultiOwnership.joinSharedProperty() (MultiOwnership.sol#159-177)
addMoney() should be declared external:
        - MultiOwnership.addMoney() (MultiOwnership.sol#182-195)
sellShare(uint256,uint256) should be declared external:
        - MultiOwnership.sellShare(uint256,uint256) (MultiOwnership.sol#202-206)
buyShare(uint256) should be declared external:
        - MultiOwnership.buyShare(uint256) (MultiOwnership.sol#212-219)
createOperation() should be declared external:
        - MultiOwnership.createOperation() (MultiOwnership.sol#253-258)
upVote() should be declared external:
        - MultiOwnership.upVote() (MultiOwnership.sol#264-274)
downVote() should be declared external:
        - MultiOwnership.downVote() (MultiOwnership.sol#280-289)
minimumPayment() should be declared external:
        - Repayment.minimumPayment() (Repayment.sol#65-69)
withdraw() should be declared external:
        - Repayment.withdraw() (Repayment.sol#71-74)
getNow() should be declared external:
        - Repayment.getNow() (Repayment.sol#83-85)
makePayment() should be declared external:
        - Repayment.makePayment() (Repayment.sol#88-106)
processMissedPayment() should be declared external:
        - Repayment.processMissedPayment() (Repayment.sol#109-124)
getRolesCount() should be declared external:
        - RoleManagement.getRolesCount() (RoleManagement.sol#76-78)
addRolesList(string) should be declared external:
        - RoleManagement.addRolesList(string) (RoleManagement.sol#84-88)
hasRole(address,string) should be declared external:
        - RoleManagement.hasRole(address,string) (RoleManagement.sol#97-103)
grantPermission(address,string) should be declared external:
        - RoleManagement.grantPermission(address,string) (RoleManagement.sol#130-132)
revokePermission(address,string) should be declared external:
        - RoleManagement.revokePermission(address,string) (RoleManagement.sol#134-136)
setCompleted(uint256) should be declared external:
        - Migrations.setCompleted(uint256) (Migrations.sol#15-17)
upgrade(address) should be declared external:
        - Migrations.upgrade(address) (Migrations.sol#19-22)
renounceOwnership() should be declared external:
        - Ownable.renounceOwnership() (@openzeppelin/contracts/ownership/Ownable.sol#55-58)
transferOwnership(address) should be declared external:
        - Ownable.transferOwnership(address) (@openzeppelin/contracts/ownership/Ownable.sol#64-66)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-as-external
. analyzed (10 contracts with 46 detectors), 123 result(s) found
Use https://crytic.io/ to get access to additional detectors and Github integration


MultiOwnership.buyProperty() (MultiOwnership.sol#151-160) sends eth to arbitrary user
        Dangerous calls:
        - reg.getPropertyOwner(pin).transfer(balance) (MultiOwnership.sol#158)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

RegistryforRepayment is re-used:
        - Repayment.sol#4-8
        - MultiOwnership.sol#7-11
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#name-reused

Repayment.processMissedPayment() (Repayment.sol#110-125) performs a multiplication on the result of a division:
        -interest = SafeMath.div(tmp,100) (Repayment.sol#115)
        -fees = SafeMath.mul(missedPayment,interest) (Repayment.sol#116)
Repayment.MissedPayment() (Repayment.sol#127-140) performs a multiplication on the result of a division:
        -interest = SafeMath.div(tmp,100) (Repayment.sol#132)
        -fees = SafeMath.mul(missedPayment,interest) (Repayment.sol#133)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

MultiOwnership.joinSharedProperty() (MultiOwnership.sol#167-186) uses a dangerous strict equality:
        - pendingBuying == amountToReach (MultiOwnership.sol#183)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in Repayment.makePayment() (Repayment.sol#91-107):
        External calls:
        - penalty = MissedPayment() (Repayment.sol#93)
                - success = r.updateProperty(creditor,pin) (Repayment.sol#145)
        State variables written after the call(s):
        - processPeriod(0) (Repayment.sol#97)
                - balance -= principal (Repayment.sol#80)
        - processPeriod(0) (Repayment.sol#97)
                - dueDate += paymentPeriod (Repayment.sol#81)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

MultiOwnership.isOwner(address).owners (MultiOwnership.sol#59) shadows:
        - MultiOwnership.owners (MultiOwnership.sol#22) (state variable)
Repayment.withdraw().balance (Repayment.sol#75) shadows:
        - Repayment.balance (Repayment.sol#19) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Reentrancy in Repayment.makePayment() (Repayment.sol#91-107):
        External calls:
        - penalty = MissedPayment() (Repayment.sol#93)
                - success = r.updateProperty(creditor,pin) (Repayment.sol#145)
        Event emitted after the call(s):
        - ChangeFromPenalty(change) (Repayment.sol#96)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Repayment.makePayment() (Repayment.sol#91-107) uses timestamp for comparisons
        Dangerous comparisons:
        - now > dueDate (Repayment.sol#92)
Repayment.processMissedPayment() (Repayment.sol#110-125) uses timestamp for comparisons
        Dangerous comparisons:
        - require(bool)(now > dueDate) (Repayment.sol#111)
Repayment.MissedPayment() (Repayment.sol#127-140) uses timestamp for comparisons
        Dangerous comparisons:
        - require(bool)(now > dueDate) (Repayment.sol#128)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Mortgage.circuitBreaker() (Mortgage.sol#71-74) compares to a boolean constant:
        -contractPaused == false (Mortgage.sol#72)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

Different versions of Solidity is used in :
        - Version used: ['0.5.16', '^0.5.0', '^0.5.16']
        - ^0.5.0 (@openzeppelin/contracts/GSN/Context.sol#1)
        - 0.5.16 (Migrations.sol#1)
        - 0.5.16 (Mortgage.sol#4)
        - 0.5.16 (MultiOwnership.sol#5)
        - ^0.5.0 (@openzeppelin/contracts/ownership/Ownable.sol#1)
        - ^0.5.16 (Registry.sol#4)
        - ^0.5.16 (Repayment.sol#2)
        - ^0.5.16 (RoleManagement.sol#1)
        - ^0.5.0 (@openzeppelin/contracts/access/Roles.sol#1)
        - ^0.5.0 (@openzeppelin/contracts/math/SafeMath.sol#1)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Pragma version^0.5.0 (@openzeppelin/contracts/GSN/Context.sol#1) allows old versions
Pragma version0.5.16 (Migrations.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (Mortgage.sol#4) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version0.5.16 (MultiOwnership.sol#5) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (@openzeppelin/contracts/ownership/Ownable.sol#1) allows old versions
Pragma version^0.5.16 (Registry.sol#4) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.16 (Repayment.sol#2) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.16 (RoleManagement.sol#1) necessitates versions too recent to be trusted. Consider deploying with 0.5.11
Pragma version^0.5.0 (@openzeppelin/contracts/access/Roles.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts/math/SafeMath.sol#1) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Migrations.upgrade(address).new_address (Migrations.sol#19) is not in mixedCase
Variable Migrations.last_completed_migration (Migrations.sol#5) is not in mixedCase
Parameter Mortgage.submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address).pin_owner (Mortgage.sol#107) is not in mixedCase
Constant Mortgage.Ether (Mortgage.sol#11) is not in UPPER_CASE_WITH_UNDERSCORES
Variable Mortgage.MortgageCount (Mortgage.sol#12) is not in mixedCase
Constant MultiOwnership.Finney (MultiOwnership.sol#31) is not in UPPER_CASE_WITH_UNDERSCORES
Function Repayment.MissedPayment() (Repayment.sol#127-140) is not in mixedCase
Constant Repayment.Ether (Repayment.sol#12) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Repayment.paymentPeriod (Repayment.sol#23) is not in UPPER_CASE_WITH_UNDERSCORES
Variable Repayment.Reg (Repayment.sol#26) is not in mixedCase
Parameter RoleManagement.checkExistingRole(string)._role (RoleManagement.sol#27) is not in mixedCase
Parameter RoleManagement.checkAdmin(address,string)._operator (RoleManagement.sol#52) is not in mixedCase
Parameter RoleManagement.checkAdmin(address,string)._role (RoleManagement.sol#52) is not in mixedCase
Parameter RoleManagement.addRolesList(string)._role (RoleManagement.sol#84) is not in mixedCase
Parameter RoleManagement.hasRole(address,string)._operator (RoleManagement.sol#97) is not in mixedCase
Parameter RoleManagement.hasRole(address,string)._role (RoleManagement.sol#97) is not in mixedCase
Parameter RoleManagement.addRole(address,string)._operator (RoleManagement.sol#110) is not in mixedCase
Parameter RoleManagement.addRole(address,string)._role (RoleManagement.sol#110) is not in mixedCase
Parameter RoleManagement.removeRole(address,string)._operator (RoleManagement.sol#122) is not in mixedCase
Parameter RoleManagement.removeRole(address,string)._role (RoleManagement.sol#122) is not in mixedCase
Parameter RoleManagement.grantPermission(address,string)._operator (RoleManagement.sol#130) is not in mixedCase
Parameter RoleManagement.grantPermission(address,string)._permission (RoleManagement.sol#130) is not in mixedCase
Parameter RoleManagement.revokePermission(address,string)._operator (RoleManagement.sol#134) is not in mixedCase
Parameter RoleManagement.revokePermission(address,string)._permission (RoleManagement.sol#134) is not in mixedCase
Variable RoleManagement.UserRoles (RoleManagement.sol#10) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in MultiOwnership.addMoney() (MultiOwnership.sol#191-206):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#196)
        State variables written after the call(s):
        - ownersPct[msg.sender] = SafeMath.add(SafeMath.div(SafeMath.mul(msg.value,100),amountToReach),tmp) (MultiOwnership.sol#200)
        - pendingBuying = balance (MultiOwnership.sol#203)
        Event emitted after the call(s):
        - OwnerSharedIncreased(msg.sender,ownersPct[msg.sender]) (MultiOwnership.sol#204)
Reentrancy in MultiOwnership.addMoney() (MultiOwnership.sol#191-206):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#196)
        - buyProperty() (MultiOwnership.sol#205)
                - reg.getPropertyOwner(pin).transfer(balance) (MultiOwnership.sol#158)
        State variables written after the call(s):
        - buyProperty() (MultiOwnership.sol#205)
                - pendingBuying = 0 (MultiOwnership.sol#153)
        Event emitted after the call(s):
        - SharedPropertyBought(pin,address(this),owners.length) (MultiOwnership.sol#154)
                - buyProperty() (MultiOwnership.sol#205)
Reentrancy in Mortgage.executeTransaction(uint256,address) (Mortgage.sol#176-189):
        External calls:
        - withdraw(transactionId) (Mortgage.sol#182)
                - mortgages[transactionId].pin_owner.transfer(balance) (Mortgage.sol#93)
        State variables written after the call(s):
        - repay = createRepayment(transactionId,addr) (Mortgage.sol#183)
                - repayments.push(address(repay)) (Mortgage.sol#167)
        Event emitted after the call(s):
        - CreateRepaymentContract(address(repay)) (Mortgage.sol#168)
                - repay = createRepayment(transactionId,addr) (Mortgage.sol#183)
Reentrancy in MultiOwnership.joinSharedProperty() (MultiOwnership.sol#167-186):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#173)
        State variables written after the call(s):
        - owners.push(msg.sender) (MultiOwnership.sol#176)
        - ownersIndices[msg.sender] = owners.length (MultiOwnership.sol#177)
        - ownersPct[msg.sender] = SafeMath.div(SafeMath.mul(amount,100),amountToReach) (MultiOwnership.sol#178)
        - pendingBuying = balance (MultiOwnership.sol#181)
        Event emitted after the call(s):
        - SharedPropertyJoined(msg.sender,ownersPct[msg.sender],SafeMath.sub(amountToReach,pendingBuying)) (MultiOwnership.sol#182)
Reentrancy in MultiOwnership.joinSharedProperty() (MultiOwnership.sol#167-186):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#173)
        - buyProperty() (MultiOwnership.sol#184)
                - reg.getPropertyOwner(pin).transfer(balance) (MultiOwnership.sol#158)
        State variables written after the call(s):
        - buyProperty() (MultiOwnership.sol#184)
                - pendingBuying = 0 (MultiOwnership.sol#153)
        Event emitted after the call(s):
        - SharedPropertyBought(pin,address(this),owners.length) (MultiOwnership.sol#154)
                - buyProperty() (MultiOwnership.sol#184)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address) should be declared external:
        - Mortgage.submitTransaction(address,address,address,uint256,uint256,uint256,uint256,address) (Mortgage.sol#107-124)
renounceOwnership() should be declared external:
        - Ownable.renounceOwnership() (@openzeppelin/contracts/ownership/Ownable.sol#55-58)
transferOwnership(address) should be declared external:
        - Ownable.transferOwnership(address) (@openzeppelin/contracts/ownership/Ownable.sol#64-66)
listProperties() should be declared external:
        - Registry.listProperties() (Registry.sol#34-36)
getPropertyOwner(uint256) should be declared external:
        - Registry.getPropertyOwner(uint256) (Registry.sol#38-40)
getPropertyCount() should be declared external:
        - Registry.getPropertyCount() (Registry.sol#58-60)
newProperty(address,uint256) should be declared external:
        - Registry.newProperty(address,uint256) (Registry.sol#66-72)
updateProperty(address,uint256) should be declared external:
        - Registry.updateProperty(address,uint256) (Registry.sol#77-83)
deleteProperty(uint256) should be declared external:
        - Registry.deleteProperty(uint256) (Registry.sol#88-98)
processMissedPayment() should be declared external:
        - Repayment.processMissedPayment() (Repayment.sol#110-125)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-as-external
. analyzed (11 contracts with 46 detectors), 64 result(s) found