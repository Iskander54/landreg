MultiOwnership.buyProperty() (MultiOwnership.sol#151-160) sends eth to arbitrary user
        Dangerous calls:
        - reg.getPropertyOwner(pin).transfer(balance) (MultiOwnership.sol#158)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

MultiOwnership.joinSharedProperty() (MultiOwnership.sol#167-186) uses a dangerous strict equality:
        - pendingBuying == amountToReach (MultiOwnership.sol#183)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in Repayment.makePayment() (Repayment.sol#91-107):
        External calls:
        - penalty = missedPayment() (Repayment.sol#93)
                - success = r.updateProperty(creditor,pin) (Repayment.sol#143)
        State variables written after the call(s):
        - processPeriod(0) (Repayment.sol#97)
                - balance -= principal (Repayment.sol#80)
        - processPeriod(0) (Repayment.sol#97)
                - dueDate += PAYMENT_PERIOD (Repayment.sol#81)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Reentrancy in Repayment.makePayment() (Repayment.sol#91-107):
        External calls:
        - penalty = missedPayment() (Repayment.sol#93)
                - success = r.updateProperty(creditor,pin) (Repayment.sol#143)
        Event emitted after the call(s):
        - ChangeFromPenalty(change) (Repayment.sol#96)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Repayment.makePayment() (Repayment.sol#91-107) uses timestamp for comparisons
        Dangerous comparisons:
        - now > dueDate (Repayment.sol#92)
Repayment.processMissedPayment() (Repayment.sol#110-124) uses timestamp for comparisons
        Dangerous comparisons:
        - require(bool)(now > dueDate) (Repayment.sol#111)
Repayment.missedPayment() (Repayment.sol#126-138) uses timestamp for comparisons
        Dangerous comparisons:
        - require(bool)(now > dueDate) (Repayment.sol#127)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Different versions of Solidity is used in :
        - Version used: ['0.5.11', '^0.5.0']
        - ^0.5.0 (@openzeppelin/contracts/GSN/Context.sol#1)
        - 0.5.11 (Migrations.sol#1)
        - 0.5.11 (Mortgage.sol#4)
        - 0.5.11 (MultiOwnership.sol#5)
        - ^0.5.0 (@openzeppelin/contracts/ownership/Ownable.sol#1)
        - 0.5.11 (Registry.sol#4)
        - 0.5.11 (Repayment.sol#2)
        - 0.5.11 (RoleManagement.sol#1)
        - ^0.5.0 (@openzeppelin/contracts/access/Roles.sol#1)
        - ^0.5.0 (@openzeppelin/contracts/math/SafeMath.sol#1)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

Pragma version^0.5.0 (@openzeppelin/contracts/GSN/Context.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts/ownership/Ownable.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts/access/Roles.sol#1) allows old versions
Pragma version^0.5.0 (@openzeppelin/contracts/math/SafeMath.sol#1) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Migrations.upgrade(address).new_address (Migrations.sol#19) is not in mixedCase
Variable Migrations.last_completed_migration (Migrations.sol#5) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in MultiOwnership.addMoney() (MultiOwnership.sol#191-206):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#196)
        State variables written after the call(s):
        - ownersPct[msg.sender] = SafeMath.add(SafeMath.div(SafeMath.mul(msg.value,100),amountToReach),tmp) (MultiOwnership.sol#200)
        - pendingBuying = balance (MultiOwnership.sol#203)
        Event emitted after the call(s):
        - OwnerSharedIncreased(msg.sender,ownersPct[msg.sender]) (MultiOwnership.sol#204)
Reentrancy in MultiOwnership.addMoney() (MultiOwnership.sol#191-206):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#196)
        - buyProperty() (MultiOwnership.sol#205)
                - reg.getPropertyOwner(pin).transfer(balance) (MultiOwnership.sol#158)
        State variables written after the call(s):
        - buyProperty() (MultiOwnership.sol#205)
                - pendingBuying = 0 (MultiOwnership.sol#153)
        Event emitted after the call(s):
        - SharedPropertyBought(pin,address(this),owners.length) (MultiOwnership.sol#154)
                - buyProperty() (MultiOwnership.sol#205)
Reentrancy in Mortgage.executeTransaction(uint256,address) (Mortgage.sol#176-189):
        External calls:
        - withdraw(transactionId) (Mortgage.sol#182)
                - mortgages[transactionId].pinOwner.transfer(balance) (Mortgage.sol#93)
        State variables written after the call(s):
        - repay = createRepayment(transactionId,addr) (Mortgage.sol#183)
                - repayments.push(address(repay)) (Mortgage.sol#167)
        Event emitted after the call(s):
        - CreateRepaymentContract(address(repay)) (Mortgage.sol#168)
                - repay = createRepayment(transactionId,addr) (Mortgage.sol#183)
Reentrancy in MultiOwnership.joinSharedProperty() (MultiOwnership.sol#167-186):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#173)
        State variables written after the call(s):
        - owners.push(msg.sender) (MultiOwnership.sol#176)
        - ownersIndices[msg.sender] = owners.length (MultiOwnership.sol#177)
        - ownersPct[msg.sender] = SafeMath.div(SafeMath.mul(amount,100),amountToReach) (MultiOwnership.sol#178)
        - pendingBuying = balance (MultiOwnership.sol#181)
        Event emitted after the call(s):
        - SharedPropertyJoined(msg.sender,ownersPct[msg.sender],SafeMath.sub(amountToReach,pendingBuying)) (MultiOwnership.sol#182)
Reentrancy in MultiOwnership.joinSharedProperty() (MultiOwnership.sol#167-186):
        External calls:
        - msg.sender.transfer(SafeMath.sub(msg.value,SafeMath.sub(amountToReach,pendingBuying))) (MultiOwnership.sol#173)
        - buyProperty() (MultiOwnership.sol#184)
                - reg.getPropertyOwner(pin).transfer(balance) (MultiOwnership.sol#158)
        State variables written after the call(s):
        - buyProperty() (MultiOwnership.sol#184)
                - pendingBuying = 0 (MultiOwnership.sol#153)
        Event emitted after the call(s):
        - SharedPropertyBought(pin,address(this),owners.length) (MultiOwnership.sol#154)
                - buyProperty() (MultiOwnership.sol#184)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

renounceOwnership() should be declared external:
        - Ownable.renounceOwnership() (@openzeppelin/contracts/ownership/Ownable.sol#55-58)
transferOwnership(address) should be declared external:
        - Ownable.transferOwnership(address) (@openzeppelin/contracts/ownership/Ownable.sol#64-66)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-as-external
. analyzed (12 contracts with 46 detectors), 21 result(s) found
Use https://crytic.io/ to get access to additional detectors and Github integration
INFO:Slither:tmp.json exists already, the overwrite is prevented